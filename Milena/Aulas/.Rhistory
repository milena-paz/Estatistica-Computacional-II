query <- "SELECT * FROM `basedosdados.br_bd_diretorios_brasil.municipio`"
dir <- tempdir()
data <- download(query, "D:/Documentos (D)/PROJETO HELOISA/caceta.csv")
query <- "SELECT * FROM `basedosdados.br_bd_diretorios_brasil.municipio`"
dir <- tempdir()
data <- download(query, path= "D:/Documentos (D)/PROJETO HELOISA/caceta.csv")
read.csv(D:/Documentos (D)/PROJETO HELOISA/caceta.csv)
read.csv("D:/Documentos (D)/PROJETO HELOISA/caceta.csv")
obj <- read.csv("D:/Documentos (D)/PROJETO HELOISA/caceta.csv")
View(obj)
gc()
remove.packages("basedosdados")
#instalação do pacote
install.packages("basedosdados")
set_billing_id("total-pillar-464723-u7")
basedosdados::set_billing_id("total-pillar-464723-u7")
library(basedosdados)
query <- "
SELECT
dados.ano as ano,
dados.sigla_uf as sigla_uf,
dados.id_municipio as id_municipio,
dados.renda_per_capita as renda_per_capita
FROM `basedosdados.br_ipea_avs.municipio` AS dados
"
tabela <- read_sql(query, billing_project_id = get_billing_id())
View(tabela)
str(tabela)
bq_deauth()
??basedosdados
get_billing_id()
body(get_billing_id)
bigrquery::bq_deauth()
tabela <- read_sql(query, billing_project_id = get_billing_id())
View(tabela)
basedosdados::set_billing_id("total-pillar-464723-u7")
basedosdados::set_billing_id("total-pillar-464723-u7")
tabela <- read_sql(query, billing_project_id = get_billing_id())
basedosdados::set_billing_id("total-pillar-464723-u7")
query <- "
SELECT
dados.ano as ano,
dados.sigla_uf as sigla_uf,
dados.id_municipio as id_municipio,
dados.renda_per_capita as renda_per_capita
FROM `basedosdados.br_ipea_avs.municipio` AS dados
"
read_sql(query, billing_project_id = get_billing_id())
library(basedosdados)
query <- "
SELECT
dados.ano as ano,
dados.sigla_uf as sigla_uf,
dados.id_municipio as id_municipio,
dados.renda_per_capita as renda_per_capita
FROM `basedosdados.br_ipea_avs.municipio` AS dados
"
read_sql(query, billing_project_id = get_billing_id())
label<-read_sql(query, billing_project_id = get_billing_id())
library(basedosdados)
label<-read_sql(query, billing_project_id = get_billing_id())
basedosdados::set_billing_id("total-pillar-464723-u7")
label<-read_sql(query, billing_project_id = get_billing_id())
View(label)
unique(label$ano)
detach("package:basedosdados", unload = TRUE)
remove.packages("basedosdados")
shiny::runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
?shiny
runApp('D:/Documentos (D)/Shiny/TCL')
?fluidPage
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
?withMathJax
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
?p
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
shiny::runApp('D:/Documentos (D)/Shiny/TCL')
?plotOutput
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
?datasets
library(help="datasets")
str(uspop)
str(warpbreaks)
str(lynx)
str(islands)
str(iris)
str(mtcars)
mtcar <- mtcars[c(1,3:7)]
View(mtcar)
gc()
## Para realizar análise de clusters, primeiro deveremos desconsiderar
#variáveis não quantitativas
dados <- mtcars[c(1,3:7)]
?scale
#padronizando os dados
dados.std <- scale(dados)
View(dados.std)
distancias <- dist(dados.std)
round(distancias,2)
print(distancias,digits=2)
View(distancias)
str(distancias)
#dendograma
cluster <- hclust(distancias)
plot(cluster)
#"cortando" a arvore para k clusters
k <- 5 #escolhi no olho
c.cluster <- cutree(cluster,k)
table(c.cluster)
plot(c.cluster)
#tabela mostrando número de membros em cada cluster
table(c.cluster)
aggregate(dados.std,c.cluster,mean)
aggregate(dados.std,list(c.cluster),mean)
aggregate(dados.std,list(Grupo=c.cluster),mean)
?aggregate
aggregate(dados,list(Grupo=c.cluster),mean) #unidades originais
/screeplot
?screeplot
?hclust
screeplot(cluster)
screeplot(princomp(dados.std))
# Scree Plot
wss <- (nrow(dados.std)-1)*sum(apply(dados.std,2,var))
for (i in 2:20) wss[i] <- sum(kmeans(nor, centers=i)$withinss)
for (i in 2:20) wss[i] <- sum(kmeans(dados.std, centers=i)$withinss)
plot(1:20, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
barplot(height=wss,add=T)
barplot(height=wss, xlab="Number of Clusters", ylab="Within groups sum of squares")
lines(1:20, wss, type="b")
barplot(height=wss,main="Screeplot",
xlab="Number of Clusters", ylab="Within groups sum of squares",col="gray45")
barplot(height=wss,main="Screeplot",
xlab="Number of Clusters", ylab="Within groups sum of squares",border="gray45")
lines(1:20, wss, type="b",col)
lines(1:20, wss, type="b",lwd=2)
wss <- (nrow(dados.std)-1)*sum(apply(dados.std,2,var))
for (i in 2:18) wss[i] <- sum(kmeans(dados.std, centers=i)$withinss)
barplot(height=wss,main="Screeplot",
xlab="Number of Clusters", ylab="Within groups sum of squares",border="gray45")
lines(1:18, wss, type="b",lwd=2)
barplot(height=wss,width=0.5,main="Screeplot",
xlab="Number of Clusters", ylab="Within groups sum of squares",border="gray45")
lines(1:18, wss, type="b",lwd=2)
barplot(height=wss,space=0,main="Screeplot",
xlab="Number of Clusters", ylab="Within groups sum of squares",border="gray45")
lines(1:18, wss, type="b",lwd=2)
barplot(height=wss,space=0,width=1.5,main="Screeplot",
xlab="Number of Clusters", ylab="Within groups sum of squares",border="gray45")
lines(1:18, wss, type="b",lwd=2)
barplot(height=wss,space=0,main="Screeplot",
xlab="Number of Clusters", ylab="Within groups sum of squares",border="gray45")
lines(1:18, wss, type="b",lwd=2)
barplot(height=wss,space=0,main="Screeplot",
xlab="Number of Clusters", ylab="Within groups sum of squares",border="gray45")
lines((1:18)-0.5, wss, type="b",lwd=2)
barplot(height=wss,space=0,main="Screeplot",
xlab="Número de grupos", ylab="Variabilidade dentro do grupo",border="gray45")
lines((1:18)-0.5, wss, type="b",lwd=2)
#podemos observar que para k=2 o "salto" de redução de variabilidade é o maior
kc<- kmeans(dados.std,2)
View(kc)
View(kc)
kc
table(kc)
table(kc$cluster)
kc
biplot(dados.std,kc)
biplot(dados.std)
biplot(dados.std[kc$cluster==1],dados.std[kc$cluster==2])
biplot(princomp(dados.std))
biplot(princomp(dados))
biplot(princomp(dados.std))
biplot(princomp(dados.std),col=kc$cluster)
cluster::clustplot(kc)
cluster::clusplot(kc)
?ordiplot
??ordiplot
plot(kc$cluster,dados.std)
plot(kc$cluster,rownames(dados.std))
plot(kc$cluster,1:32)
biplot(princomp(dados.std))
biplot(princomp(dados.std),lwd=2)
library(factoextra)
fviz_cluster(kc,data=dados.std,palette=c("blue","red"))
kc<- kmeans(dados.std,4)
#verificar quantos membros há em cada cluster
table(kc$cluster)
fviz_cluster(kc,data=dados.std,palette=c("blue","red"))
fviz_cluster(kc,data=dados.std,palette=c("blue","red","green","orange"))
fviz_cluster(kc,data=dados.std)
kc<- kmeans(dados.std,5)
#verificar quantos membros há em cada cluster
table(kc$cluster)
fviz_cluster(kc,data=dados.std)
str(mtcars)
fviz_dend(dados.std)
fviz_dend(distancia)
fviz_dend(cluster)
plot(cluster)
gc()
## Para realizar análise de clusters, deveremos desconsiderar as variáveis
#não quantitativas.
#exemplo com o dataset mtcars:
dados <- mtcars[c(1,3:7)]
#padronizando os dados
dados.std <- scale(dados)
#lembrando que padronizacao é: subtrair pela média e dividir pelo desvio padrão
#distancias euclidianas
distancias <- dist(dados.std)
### Análise de grupamento hierárquica ###
#dendrograma (complete linkage, mas há outros métodos)
cluster <- hclust(distancias)
plot(cluster)
#"cortando" a arvore para k clusters
k <- 5 #escolhi no olho
c.cluster <- cutree(cluster,k)
#tabela mostrando número de membros em cada cluster
table(c.cluster)
#médias dos grupos(clusters)
aggregate(dados.std,list(Grupo=c.cluster),mean) #padronizado
aggregate(dados,list(Grupo=c.cluster),mean) #unidades originais
### Análise de clusters de k-means (não-hierárquica) ###
# Scree Plot
wss <- (nrow(dados.std)-1)*sum(apply(dados.std,2,var))
for (i in 2:18) wss[i] <- sum(kmeans(dados.std, centers=i)$withinss)
barplot(height=wss,space=0,main="Screeplot",border="gray45",
xlab="Número de grupos", ylab="Variabilidade dentro do grupo")
lines((1:18)-0.5, wss, type="b",lwd=2)
#pacote com funcionalidades de analise da dados multivariados
library(factoextra)
kc<- kmeans(dados.std,3)
#verificar quantos membros há em cada cluster
table(kc$cluster)
#comando de visualizacao das clusters(do factoextra)
fviz_cluster(kc,data=dados.std)
View(dados.std)
kc<- kmeans(dados.std,2)
#verificar quantos membros há em cada cluster
table(kc$cluster)
#comando de visualizacao das clusters(do factoextra)
fviz_cluster(kc,data=dados.std)
kc<- kmeans(dados.std,3)
#verificar quantos membros há em cada cluster
table(kc$cluster)
#comando de visualizacao das clusters(do factoextra)
fviz_cluster(kc,data=dados.std)
kc<- kmeans(dados.std,4)
#verificar quantos membros há em cada cluster
table(kc$cluster)
#comando de visualizacao das clusters(do factoextra)
fviz_cluster(kc,data=dados.std)
fviz_cluster(cluster)
cite(HairEyeColor)
cite("HairEyeColor")
citation("HairEyeColor",bib=)
citation("HairEyeColor")
citation(datasets::HairEyeColor)
citation(datasets)
citation(utils)
citation("datasets")
cite_packages()
citation(gifski)
citation("gifski")
citation("shiny")
shiny::runApp('D:/Documentos (D)/Shiny/TCL')
?density
shiny::runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
?distributions
shiny::runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
runApp('D:/Documentos (D)/Shiny/TCL')
#DADOS PNADCA - IBGE
install.packages("PNADcIBGE")
library(PNADcIBGE)
?get_pnadc
# COMANDO PARA BAIXAR OS DADOS
help(get_pnadc)
dados <- get_pnadc(year=2023,topic=1,labels=T)
View(dados)
dados <- dados$variables
str(dados)
setwd("D:/Documentos (D)/UFJF/7-PERIODO/COMPUTACIONAL II/Estatistica-Computacional-II/Milena/Aulas")
simula2 <- function(p){
C <- sapply(p, function(p) rbinom(1,1,p))
M<- matrix(0,nrow=5,ncol=5)
M[1,-1] <- c(C[1],C[3],C[5],C[4])
M[-1,5] <- c(C[2],C[2],C[6],1)
passos <- M %*% M %*% M
funciona <- min(passos[1,4], 1)
return(funciona)
}
#exemplo
# p=1/2 para todas as 6 chaves
p <- rep(0.5,6)
Nsim <- 1E3
Sim<- replicate(Nsim, simula2(p))
#resp:
p <- 0.5; p+3*p**2-4*p**3-p**4+3*p**5-p**6
mean(Sim)
simula2 <- function(p){
C <- sapply(p, function(p) rbinom(1,1,p))
M<- matrix(0,nrow=5,ncol=5)
M[1,-1] <- c(C[1],C[3],C[5],C[4])
M[-1,5] <- c(C[2],C[2],C[6],1)
print(M)
passos <- M %*% M %*% M
funciona <- min(passos[1,4], 1)
return(funciona)
}
#exemplo
# p=1/2 para todas as 6 chaves
p <- rep(0.5,6)
Nsim <- 1E3
Sim<- replicate(Nsim, simula2(p))
#resp:
p <- 0.5; p+3*p**2-4*p**3-p**4+3*p**5-p**6
mean(Sim)
simula2 <- function(p){
C <- sapply(p, function(p) rbinom(1,1,p))
M<- matrix(0,nrow=5,ncol=5)
M[1,-1] <- c(C[1],C[3],C[5],C[4])
M[-1,5] <- c(C[2],C[2],C[6],1)
passos <- M %*% M %*% M
funciona <- min(passos[1,4], 1)
return(funciona)
}
#exemplo
# p=1/2 para todas as 6 chaves
p <- rep(0.99,6)
Nsim <- 1E3
Sim<- replicate(Nsim, simula2(p))
#resp:
p <- 0.99; p+3*p**2-4*p**3-p**4+3*p**5-p**6
mean(Sim)
simula2 <- function(p){
C <- sapply(p, function(p) rbinom(1,1,p))
M<- matrix(0,nrow=5,ncol=5)
M[1,-1] <- c(C[1],C[3],C[5],C[4])
M[-1,5] <- c(C[2],C[2],C[6],1)
passos <- M %*% M %*% M
funciona <- min(passos[1,5], 1)
return(funciona)
}
#exemplo
# p=1/2 para todas as 6 chaves
p <- rep(0.99,6)
Nsim <- 1E3
Sim<- replicate(Nsim, simula2(p))
#resp:
p <- 0.99; p+3*p**2-4*p**3-p**4+3*p**5-p**6
mean(Sim)
simula2 <- function(p){
C <- sapply(p, function(p) rbinom(1,1,p))
M<- matrix(0,nrow=5,ncol=5)
M[1,-1] <- c(C[1],C[3],C[5],C[4])
M[-1,5] <- c(C[2],C[2],C[6],1)
passos <- M %*% M %*% M
funciona <- min(passos[1,5], 1)
return(funciona)
}
#exemplo
# p=1/2 para todas as 6 chaves
p <- rep(0.5,6)
Nsim <- 1E3
Sim<- replicate(Nsim, simula2(p))
#resp:
p <- 0.5; p+3*p**2-4*p**3-p**4+3*p**5-p**6
mean(Sim)
