P4 <- P2 %*% P2
P4
P4 %*% P2
(P4 %*% M) %*% (P4 %*% M)
P10 <- (P4 %*% M) %*% (P4 %*% M)
P10 %*% (P4 %*% M)
.0564*.453319*0.2898303*0.487215
.0396*.467968*0.28983*0.487215
?qqline
#### Normal Multivariada ####
#para gerar uma normal multivariada precisariamos de:
#- vetor de médias
#- matriz de covariâncias
### Normal Bivariada
#deseja-se gerar 100 pares ordenados de uma normal bivariada
#com
mu1<-1 ; mu2<- 3; var1<- 2; var2<- 1; corr <- -0.8
#para isso:
# -Calcular var.str = var1*(1-corr^2)
# -Geramos X2 de acordo com sua distribuição marginal
# -Calculamos mu.str <- 1 - corr*sqrt(var2/var1)*(X2-3)
# -Gerar X1 de acordo com uma N(mu.str,var.str)
# -Retornar (X1,X2)
BiNorm <- function(n,mu1,mu2,var1,var2,corr){
var.str <- var1*(1-corr^2)
X2 <- rnorm(n, mu2,sqrt(var2))
mu.str <- mu1 + corr*sqrt(var1/var2)*(X2-mu2)
X1 <- sapply(mu.str, function(mu){
rnorm(1,mu,sqrt(var.str))
})
return(matrix(c(X1,X2), ncol=2))
}
X.til <- BiNorm(100,mu1,mu2,var1,var2,corr)
X1 <- X.til[,1]
X2 <- X.til[,2]
plot(X1,X2)
hist(X1,freq=F,breaks=25)
curve(dnorm(x,mu1,sqrt(var1)),add=T,col="blue",lwd=2)
hist(X2, freq=F,breaks=25)
curve(dnorm(x,mu2,sqrt(var2)),add=T,col="red",lwd=2)
#medias
(medias <- apply(X.til,2,mean))
# matriz de covariancias
S <- cov(X.til)
#correlacao
cov(X1,X2)/sqrt(var1*var2)
#
Xc<- scale(X.til,center=T,scale=F)
M <- Xc %*% solve(S) %*% t(Xc)
scores <- diag(M)
#construcao do Q-Q plot da amostra
ks.test(scores, pchisq, df=3)
mu1<-1 ; mu2<- 3; var1<- 2; var2<- 1; corr <- -0.8
#para isso:
# -Calcular var.str = var1*(1-corr^2)
# -Geramos X2 de acordo com sua distribuição marginal
# -Calculamos mu.str <- 1 - corr*sqrt(var2/var1)*(X2-3)
# -Gerar X1 de acordo com uma N(mu.str,var.str)
# -Retornar (X1,X2)
BiNorm <- function(n,mu1,mu2,var1,var2,corr){
var.str <- var1*(1-corr^2)
X2 <- rnorm(n, mu2,sqrt(var2))
mu.str <- mu1 + corr*sqrt(var1/var2)*(X2-mu2)
X1 <- sapply(mu.str, function(mu){
rnorm(1,mu,sqrt(var.str))
})
return(matrix(c(X1,X2), ncol=2))
}
X.til <- BiNorm(1E3,mu1,mu2,var1,var2,corr)
X1 <- X.til[,1]
X2 <- X.til[,2]
plot(X1,X2)
hist(X1,freq=F,breaks=25)
curve(dnorm(x,mu1,sqrt(var1)),add=T,col="blue",lwd=2)
hist(X2, freq=F,breaks=25)
curve(dnorm(x,mu2,sqrt(var2)),add=T,col="red",lwd=2)
#medias
(medias <- apply(X.til,2,mean))
# matriz de covariancias
S <- cov(X.til)
#correlacao
cov(X1,X2)/sqrt(var1*var2)
## Seja Xtil ~ Np(mutil,sigma), entao:
#(xtil-mutil)%*% solve(sigma) %*%(xtil-mutil) ~ Chisq(p) , onde solve() é a inversão da matriz
#entao
#scale(Xtil,center=T,scale=F) %*% solve(S) %*% t(scale(Xtil,center=T,scale=F))
#
Xc<- scale(X.til,center=T,scale=F)
scores <- diag(Xc %*% solve(S) %*% t(Xc))
#construcao do Q-Q plot da amostra
ks.test(scores, pchisq, df=3)
S
-.8*sqrt(2)
Xc<- scale(X.til,center=T,scale=F)
scores <- diag(Xc %*% solve(S) %*% t(Xc))
#construcao do Q-Q plot da amostra
ks.test(scores, pchisq, df=3)
probs <- ppoints(length(scores))
q.amostra<- sort(scores)
q.teorico <- qchisq(probs, df=3)
plot(q.teorico, q.amostra, main="Q-Q plot Qui-Quadrado(3)")
b<- (q.amostra[75]-q.amostra[25])/(q.teorico[75]-q.teorico[25])
abline(a=q.amostra[25] - q.teorico[25]*b,b= b,
col="blue", lty=2,lwd=3)
Xc<- scale(X,center=T,scale=F)
#   matriz de covariancias SigmaX
mi<- c(-1,0,1)
SigmaX <- matrix(c(9,4,2,4,8,3,2,3,7),ncol=3)
# 1- GERAR P NUMEROS ALEATORIOS DE NORMAL PADRAO
Z <- rnorm(3)
# 2- Encontrar uma matriz A t.q. SigmaX = A*t(A) (decomposicao de Cholesky)
A <- t(chol(SigmaX))
# 3- Calcular X = A*Z+mi
X<- A%*%Z+mi
###
V.meio<- diag(1/sqrt(diag(SigmaX)))
V.meio%*%SigmaX%*%V.meio #matriz de correlacao teorica
geraMultinorm <- function(n, p, mi, sigma){
Z<- replicate(n, rnorm(p))
#podemos mudar essa geracao da normal padrao usando box-muller
A <- t(chol(SigmaX))
X <- apply(Z,2,function(z) A%*%z+mi )
return(t(X))
}
X<- geraMultinorm(100,3,mi,SigmaX)
Xc<- scale(X,center=T,scale=F)
scores <- diag(Xc %*% solve(S) %*% t(Xc))
S <- cov(X) # matriz de covariancas amostral
scores <- diag(Xc %*% solve(S) %*% t(Xc))
#Q-Q plot da normal trivariada
Xc<- scale(X,center=T,scale=F)
scores <- diag(Xc %*% solve(S) %*% t(Xc))
ks.test(scores, pchisq, df=3)
mu1<-1 ; mu2<- 3; var1<- 2; var2<- 1; corr <- -0.8
#para isso:
# -Calcular var.str = var1*(1-corr^2)
# -Geramos X2 de acordo com sua distribuição marginal
# -Calculamos mu.str <- 1 - corr*sqrt(var2/var1)*(X2-3)
# -Gerar X1 de acordo com uma N(mu.str,var.str)
# -Retornar (X1,X2)
BiNorm <- function(n,mu1,mu2,var1,var2,corr){
var.str <- var1*(1-corr^2)
X2 <- rnorm(n, mu2,sqrt(var2))
mu.str <- mu1 + corr*sqrt(var1/var2)*(X2-mu2)
X1 <- sapply(mu.str, function(mu){
rnorm(1,mu,sqrt(var.str))
})
return(matrix(c(X1,X2), ncol=2))
}
X.til <- BiNorm(1E3,mu1,mu2,var1,var2,corr)
X1 <- X.til[,1]
X2 <- X.til[,2]
plot(X1,X2)
hist(X1,freq=F,breaks=25)
curve(dnorm(x,mu1,sqrt(var1)),add=T,col="blue",lwd=2)
hist(X2, freq=F,breaks=25)
curve(dnorm(x,mu2,sqrt(var2)),add=T,col="red",lwd=2)
#medias
(medias <- apply(X.til,2,mean))
# matriz de covariancias
S <- cov(X.til)
#correlacao
cov(X1,X2)/sqrt(var1*var2)
## Seja Xtil ~ Np(mutil,sigma), entao:
#(xtil-mutil)%*% solve(sigma) %*%(xtil-mutil) ~ Chisq(p) , onde solve() é a inversão da matriz
#entao
#scale(Xtil,center=T,scale=F) %*% solve(S) %*% t(scale(Xtil,center=T,scale=F))
#
Xc<- scale(X.til,center=T,scale=F)
scores <- diag(Xc %*% solve(S) %*% t(Xc))
#construcao do Q-Q plot da amostra
ks.test(scores, pchisq, df=2)
probs <- ppoints(length(scores))
q.amostra<- sort(scores)
q.teorico <- qchisq(probs, df=2)
plot(q.teorico, q.amostra, main="Q-Q plot Qui-Quadrado(3)")
b<- (q.amostra[75]-q.amostra[25])/(q.teorico[75]-q.teorico[25])
mu1<-1 ; mu2<- 3; var1<- 2; var2<- 1; corr <- -0.8
#para isso:
# -Calcular var.str = var1*(1-corr^2)
# -Geramos X2 de acordo com sua distribuição marginal
# -Calculamos mu.str <- 1 - corr*sqrt(var2/var1)*(X2-3)
# -Gerar X1 de acordo com uma N(mu.str,var.str)
# -Retornar (X1,X2)
BiNorm <- function(n,mu1,mu2,var1,var2,corr){
var.str <- var1*(1-corr^2)
X2 <- rnorm(n, mu2,sqrt(var2))
mu.str <- mu1 + corr*sqrt(var1/var2)*(X2-mu2)
X1 <- sapply(mu.str, function(mu){
rnorm(1,mu,sqrt(var.str))
})
return(matrix(c(X1,X2), ncol=2))
}
X.til <- BiNorm(1E3,mu1,mu2,var1,var2,corr)
X1 <- X.til[,1]
X2 <- X.til[,2]
plot(X1,X2)
hist(X1,freq=F,breaks=25)
curve(dnorm(x,mu1,sqrt(var1)),add=T,col="blue",lwd=2)
hist(X2, freq=F,breaks=25)
curve(dnorm(x,mu2,sqrt(var2)),add=T,col="red",lwd=2)
#medias
(medias <- apply(X.til,2,mean))
# matriz de covariancias
S <- cov(X.til)
#correlacao
cov(X1,X2)/sqrt(var1*var2)
## Seja Xtil ~ Np(mutil,sigma), entao:
#(xtil-mutil)%*% solve(sigma) %*%(xtil-mutil) ~ Chisq(p) , onde solve() é a inversão da matriz
#entao
#scale(Xtil,center=T,scale=F) %*% solve(S) %*% t(scale(Xtil,center=T,scale=F))
#
Xc<- scale(X.til,center=T,scale=F)
scores <- diag(Xc %*% solve(S) %*% t(Xc))
#construcao do Q-Q plot da amostra
ks.test(scores, pchisq, df=2)
probs <- ppoints(length(scores))
q.amostra<- sort(scores)
q.teorico <- qchisq(probs, df=2)
plot(q.teorico, q.amostra, main="Q-Q plot Qui-Quadrado(3)")
b<- (q.amostra[75]-q.amostra[25])/(q.teorico[75]-q.teorico[25])
abline(a=q.amostra[25] - q.teorico[25]*b,b= b,
col="blue", lty=2,lwd=3)
quantile(scores, prob=c(0.25,0.75))
qchisq(c(0.25,0.75),df=3)
plot(q.teorico, q.amostra, main="Q-Q plot Qui-Quadrado(3)")
qqline(q.teorico)
qqline(q.amostra)
plot(q.teorico, q.amostra, main="Q-Q plot Qui-Quadrado(2)")
qqline(q.amostra)
qqline(q.amostra,distribution= qchisq,df=2)
qqline(q.amostra,distribution= qchisq(df=2))
qqline(q.amostra,distribution= qchisq(p,df=2))
plot(q.teorico, q.amostra, main="Q-Q plot Qui-Quadrado(2)")
#abline(a=q.amostra[25] - q.teorico[25]*b,b= b,
#         col="blue", lty=2,lwd=3)
qqline(q.amostra, distribution = function(p) qchisq(p,df=2))
Xc<- scale(X,center=T,scale=F)
mi<- c(-1,0,1)
SigmaX <- matrix(c(9,4,2,4,8,3,2,3,7),ncol=3)
# 1- GERAR P NUMEROS ALEATORIOS DE NORMAL PADRAO
Z <- rnorm(3)
# 2- Encontrar uma matriz A t.q. SigmaX = A*t(A) (decomposicao de Cholesky)
A <- t(chol(SigmaX))
# 3- Calcular X = A*Z+mi
X<- A%*%Z+mi
###
V.meio<- diag(1/sqrt(diag(SigmaX)))
V.meio%*%SigmaX%*%V.meio #matriz de correlacao teorica
geraMultinorm <- function(n, p, mi, sigma){
Z<- replicate(n, rnorm(p))
#podemos mudar essa geracao da normal padrao usando box-muller
A <- t(chol(SigmaX))
X <- apply(Z,2,function(z) A%*%z+mi )
return(t(X))
}
X<- geraMultinorm(100,3,mi,SigmaX)
S <- cov(X) # matriz de covariancas amostral
colMeans(X) # media amostral
R<- cor(X) # matriz de correlacao amostral
#verificar normalidade das marginais
sapply(1:3, function(i){
ks.test(X[,i], pnorm, mean=mi[i], sd= sqrt(SigmaX[i,i]))
})
# Visualizando as distribuicoes bivariadas:
#(X1,X2); (X2,X3) ; (X1,X3)
plot(X[,1],X[,2])
plot(X[,2],X[,3])
plot(X[,1],X[,3])
## Q-Q plot da normal trivariada
Xc<- scale(X,center=T,scale=F)
scores <- diag(Xc %*% solve(S) %*% t(Xc))
#construcao do Q-Q plot da amostra
ks.test(scores, pchisq, df=3)
probs <- ppoints(length(scores))
q.amostra<- sort(scores)
q.teorico <- qchisq(probs, df=3)
plot(q.teorico, q.amostra, main="Q-Q plot Qui-Quadrado(3)")
qqline(q.amostra, distribution = function(p) qchisq(p,df=3))
qqline(q.amostra, distribution = function(p) qchisq(p,df=3),
col="blue", lty=2,lwd=3)
setwd("D:/Documentos (D)/UFJF/7-PERIODO/COMPUTACIONAL II/Estatistica-Computacional-II/Milena/Aulas")
#salvando parametros:
mi <- c(1,3)
sigma <- c(2,1)
corr <- -0.8
#funcao geradora:
BiNorm <- function(n,mu1,mu2,var1,var2,corr){
var.str <- var1*(1-corr^2)
X2 <- rnorm(n, mu2,sqrt(var2))
mu.str <- mu1 + corr*sqrt(var1/var2)*(X2-mu2)
X1 <- sapply(mu.str, function(mu){
rnorm(1,mu,sqrt(var.str))
})
return(matrix(c(X1,X2), ncol=2))
}# fim funcao geradora
X.til <- BiNorm(1E3,mi[1],mi[2],sigma[1],sigma[2],corr)
X1 <- X.til[,1]
X2 <- X.til[,2]
plot(X1,X2)
#salvando parametros:
mi <- c(1,3)
sigma <- c(2,1)
corr <- -0.8
#funcao geradora:
BiNorm <- function(n,mu1,mu2,var1,var2,corr){
var.str <- var1*(1-corr^2)
X2 <- rnorm(n, mu2,sqrt(var2))
mu.str <- mu1 + corr*sqrt(var1/var2)*(X2-mu2)
X1 <- sapply(mu.str, function(mu){
rnorm(1,mu,sqrt(var.str))
})
return(matrix(c(X1,X2), ncol=2))
}# fim funcao geradora
X.til <- BiNorm(1E3,mi[1],mi[2],sigma[1],sigma[2],corr)
X1 <- X.til[,1]
X2 <- X.til[,2]
#visualizando os pares ordenados
plot(X1,X2)
hist(X1,freq=F,breaks=25)
curve(dnorm(x,mi[1],sqrt(var1)),add=T,col="blue",lwd=2)
hist(X2, freq=F,breaks=25)
curve(dnorm(x,mi[2],sqrt(var2)),add=T,col="red",lwd=2)
#medias
(medias <- apply(X.til,2,mean))
# matriz de covariancias
S <- cov(X.til)
#correlacao
cov(X1,X2)/sqrt(var1*var2)
## Seja Xtil ~ Np(mutil,sigma), entao:
#(xtil-mutil)%*% solve(sigma) %*%(xtil-mutil) ~ Chisq(p) , onde solve() é a inversão da matriz
#entao
#scale(Xtil,center=T,scale=F) %*% solve(S) %*% t(scale(Xtil,center=T,scale=F))
#
Xc<- scale(X.til,center=T,scale=F)
scores <- diag(Xc %*% solve(S) %*% t(Xc))
#construcao do Q-Q plot da amostra
ks.test(scores, pchisq, df=2)
probs <- ppoints(length(scores))
q.amostra<- sort(scores)
q.teorico <- qchisq(probs, df=2)
plot(q.teorico, q.amostra, main="Q-Q plot Qui-Quadrado(2)")
#b<- (q.amostra[75]-q.amostra[25])/(q.teorico[75]-q.teorico[25])
#abline(a=q.amostra[25] - q.teorico[25]*b,b= b,
#         col="blue", lty=2,lwd=3)
qqline(q.amostra, distribution = function(p) qchisq(p,df=2))
#salvando parametros:
mi <- c(1,3)
sigma <- c(2,1)
corr <- -0.8
#funcao geradora:
BiNorm <- function(n,mu1,mu2,var1,var2,corr){
var.str <- var1*(1-corr^2)
X2 <- rnorm(n, mu2,sqrt(var2))
mu.str <- mu1 + corr*sqrt(var1/var2)*(X2-mu2)
X1 <- sapply(mu.str, function(mu){
rnorm(1,mu,sqrt(var.str))
})
return(matrix(c(X1,X2), ncol=2))
}# fim funcao geradora
X.til <- BiNorm(1E3,mi[1],mi[2],sigma[1],sigma[2],corr)
X1 <- X.til[,1]
X2 <- X.til[,2]
#visualizando os pares ordenados
plot(X1,X2)
hist(X1,freq=F,breaks=25)
curve(dnorm(x,mi[1],sqrt(sigma[1])),add=T,col="blue",lwd=2)
hist(X2, freq=F,breaks=25)
curve(dnorm(x,mi[2],sqrt(sigma[2])),add=T,col="red",lwd=2)
#medias
(medias <- apply(X.til,2,mean))
# matriz de covariancias
S <- cov(X.til)
#correlacao
cov(X1,X2)/sqrt(var1*var2)
## Seja Xtil ~ Np(mutil,sigma), entao:
#(xtil-mutil)%*% solve(sigma) %*%(xtil-mutil) ~ Chisq(p) , onde solve() é a inversão da matriz
#entao
#scale(Xtil,center=T,scale=F) %*% solve(S) %*% t(scale(Xtil,center=T,scale=F))
#
Xc<- scale(X.til,center=T,scale=F)
scores <- diag(Xc %*% solve(S) %*% t(Xc))
#construcao do Q-Q plot da amostra
ks.test(scores, pchisq, df=2)
probs <- ppoints(length(scores))
q.amostra<- sort(scores)
q.teorico <- qchisq(probs, df=2)
plot(q.teorico, q.amostra, main="Q-Q plot Qui-Quadrado(2)")
#b<- (q.amostra[75]-q.amostra[25])/(q.teorico[75]-q.teorico[25])
#abline(a=q.amostra[25] - q.teorico[25]*b,b= b,
#         col="blue", lty=2,lwd=3)
qqline(q.amostra, distribution = function(p) qchisq(p,df=2))
#medias amostrais:
apply(X.til,2,mean) |> names() <- c("X1","X2")
#salvando parametros:
mi <- c(1,3)
sigma <- c(2,1)
corr <- -0.8
#funcao geradora:
BiNorm <- function(n,mu1,mu2,var1,var2,corr){
var.str <- var1*(1-corr^2)
X2 <- rnorm(n, mu2,sqrt(var2))
mu.str <- mu1 + corr*sqrt(var1/var2)*(X2-mu2)
X1 <- sapply(mu.str, function(mu){
rnorm(1,mu,sqrt(var.str))
})
return(matrix(c(X1,X2), ncol=2))
}# fim funcao geradora
X.til <- BiNorm(1E3,mi[1],mi[2],sigma[1],sigma[2],corr)
X1 <- X.til[,1]
X2 <- X.til[,2]
#visualizando os pares ordenados
plot(X1,X2)
#histogramas individuais:
hist(X1,freq=F,breaks=25)
curve(dnorm(x,mi[1],sqrt(sigma[1])),add=T,col="blue",lwd=2)
hist(X2, freq=F,breaks=25)
curve(dnorm(x,mi[2],sqrt(sigma[2])),add=T,col="red",lwd=2)
#medias amostrais:
apply(X.til,2,mean)
# matriz de covariancias
S <- cov(X.til)
#correlacao amostral
cov(X1,X2)/sqrt(sigma[1]*sigma[2])
## Seja Xtil ~ Np(mutil,sigma), entao:
#(xtil-mutil)%*% solve(sigma) %*%(xtil-mutil) ~ Chisq(p) , onde solve() é a inversão da matriz
#entao
#scale(Xtil,center=T,scale=F) %*% solve(S) %*% t(scale(Xtil,center=T,scale=F))
#
Xc<- scale(X.til,center=T,scale=F)
scores <- diag(Xc %*% solve(S) %*% t(Xc))
#construcao do Q-Q plot da amostra
ks.test(scores, pchisq, df=2)
probs <- ppoints(length(scores))
q.amostra<- sort(scores)
q.teorico <- qchisq(probs, df=2)
plot(q.teorico, q.amostra, main="Q-Q plot Qui-Quadrado(2)")
#b<- (q.amostra[75]-q.amostra[25])/(q.teorico[75]-q.teorico[25])
#abline(a=q.amostra[25] - q.teorico[25]*b,b= b,
#         col="blue", lty=2,lwd=3)
qqline(q.amostra, distribution = function(p) qchisq(p,df=2))
?scale
Xc<- scale(X.til,scale=F)
scores <- diag(Xc %*% solve(S) %*% t(Xc))
#construcao do Q-Q plot da amostra
ks.test(scores, pchisq, df=2)
probs <- ppoints(length(scores))
q.amostra<- sort(scores)
q.teorico <- qchisq(probs, df=2)
plot(q.teorico, q.amostra, main="Q-Q plot Qui-Quadrado(2)")
qqline(q.amostra, distribution = function(p) qchisq(p,df=2))
## definindo parametros
mi<- c(-1,0,1)
SigmaX <- matrix(c(9,4,2,4,8,3,2,3,7),ncol=3)
##
Z <- rnorm(3)
A <- t(chol(SigmaX))
X<- A%*%Z+mi
###
V.meio<- diag(1/sqrt(diag(SigmaX)))
#matriz de correlacao teorica:
V.meio%*%SigmaX%*%V.meio
#funcao geradora multinormal
Multinorm <- function(n, p, mi, sigma){
Z<- replicate(n, rnorm(p))
A <- t(chol(SigmaX))
X <- apply(Z,2,function(z) A%*%z+mi )
return(t(X))
} #fim funcao geradora
## obs: seria bom adicionar verificaçoes das dimensoes e se a
## matriz sigma é positiva definida
X<- Multinorm(100,3,mi,SigmaX)
S <- cov(X) # matriz de covariancas amostral
colMeans(X) # media amostral
R<- cor(X) # matriz de correlacao amostral
#verificando normalidade das marginais
sapply(1:3, function(i){
ks.test(X[,i], pnorm, mean=mi[i], sd= sqrt(SigmaX[i,i]))
},simplify=F)
# Visualizando as distribuicoes bivariadas:
#(X1,X2); (X2,X3) ; (X1,X3)
plot(X[,1],X[,2])
plot(X[,2],X[,3])
plot(X[,1],X[,3])
autov <- eigen(SigmaX)
View(autov)
rotacao <- angulo(c(1,0),autov$vectors[1,])
elipse <- function(a,b,rot=0,x0=0,y0=0) list(x=function(x) a*cos(x)*cos(rot)+b*sin(x)*sin(rot) + x0,y= function(x) a*cos(x)*sin(rot) - b*sin(x)*cos(rot)+y0)
#o parametro a b da elipse, autovalores deve ser os autovalores da matriz de covariancia
elipse.a <- function(a,autovalores) sqrt(qchisq(a,2)*(autovalores[1]))
elipse.b <- function(a,autovalores) sqrt(qchisq(a,2)*(autovalores[2]))
#calcula o angulo entre dois vetores, usei para achar a rotacao da minha elipse
angulo <- function(a,b) acos(sum(a*b)/(sqrt(sum(a*a))*sqrt(sum(b*b))))
parametric.draw <- function(range,funct,precision=100,...)
{
#faz "precision" linhas para aproximar a curva
points <- seq(from=range[1],to=range[2],length.out=precision)
coords <- list(x = funct$x(points), y = funct$y(points))
lines(coords$x,coords$y,...)
}
rotacao <- angulo(c(1,0),autov$vectors[1,])
autov <- eigen(SigmaX[-3,-3])
rotacao <- angulo(c(1,0),autov$vectors[1,])
plot(X[,1],X[,2])
parametric.draw(c(0,2*pi),elipse(elipse.a(0.95,autov$values),elipse.b(0.95,autov$values),
rotacao,medias[1],medias[2]),col="red",lwd=3)
medias <- apply(X,2, mean)
plot(X[,1],X[,2])
parametric.draw(c(0,2*pi),elipse(elipse.a(0.95,autov$values),elipse.b(0.95,autov$values),
rotacao,medias[1],medias[2]),col="red",lwd=3)
parametric.draw(c(0,2*pi),elipse(elipse.a(0.5,autov$values),elipse.b(0.5,autov$values),
rotacao,medias[1],medias[2]),col="red",lwd=3)
