buscaRaiz.2 <- function(fun,deriv,x0,max,e){
diff <- e+1
cont <- 0
while(diff > e & max-cont>0){
derivada <- deriv(x0)
if(derivada==0){
cat("Ponto crítico encontrado\n"); break
}
prox <- x0 - fun(x0)/derivada
diff <- abs(x0 - prox)
x0 <- prox; cont <- cont + 1
}
cat(cont," iterações\n")
return(x0)
}
avalia <- function(expr, val){
x <- val
return(eval(expr))
}
newtonR <- function(expr, x0, max=20, e=1E-5){
#-------------------------------------------#
#expr: expression() com variavel de nome "x"
#x0: valor inicial
#max: numero maximo de iterações
#e: erro
#-------------------------------------------#
df <- D(expr, name="x")
diff <- e+1
while(diff > e & max>=1){
derivada <- avalia(df,x0)
if(derivada==0){
cat("Ponto crítico encontrado"); break
}
prox <- x0 - avalia(expr,x0)/derivada
diff <- abs(x0 - prox)
x0 <- prox
max <- max-1
}
return(x0)
}
newtonR(expression(e^(-10*p)-0.15),x0=1)
newtonR(expression(e^(-10*p)-0.15),x0=3)
newtonR(expression(e^(-10*x)-0.15),x0=3)
newtonR(expression(exp(-10*x)-0.15),x0=1)
newtonR(expr=expression(exp(-10*x)-0.15),x0=1)
newtonR(expr=expression(exp(-10*x)-0.15),x0=5)
newtonR(expr=expression(exp(-10*x)-0.15),x0=-1)
newtonR(expr=expression(exp(-10*x)-0.15),x0=-5)
newtonR(expr=expression(exp(-10*x)-0.15),x0=-3)
newtonR(expr=expression(exp(-10*x)-0.15),x0=-0.5)
newtonR(expr=expression(exp(-10*x)-0.15),x0=-1,max=100)
newtonR(expr=expression(exp(-10*x)-0.15),x0=-1,max=100,e=1E-9)
newtonR(expr=expression(exp(-10*x)-0.15),x0=0.4,max=100,e=1E-9)
curve(function(x) exp(20*x)/(1800*x^2),from=0,to=10)
curve(exp(20*x)/(1800*x^2),from=0,to=10)
curve(exp(20*x)/(1800*x^2),from=9,to=10)
curve(exp(20*x)/(1800*x^2),from=8,to=9)
dados <- read.csv(file="D:/Documentos (D)/UFJF/7-PERIODO/IC/Dados_Estados_Brasileiros.csv")
plot(dados[,-1])
boxplot(dados[,-1])
boxplot(dados[,-1])
View(dados)
boxplot(dados$IDH)
plot(1:7,type="n")
View(dados)
plot(y=(0,100),type="n")
plot(y=c(0,100),type="n")
plot(x=1:2,y=c(0,100),type="n")
boxplot(dados$MortalidadeInfantil/100,add=T)
plot(x=1:2,y=c(0,4),type="n")
boxplot(dados$MortalidadeInfantil/100,add=T)
plot(x=0:2,y=c(0,4),type="n")
plot(x=0:2,y=c(0,2,4),type="n")
plot(x=0,type="n")
boxplot(dados$MortalidadeInfantil/100)
plot(dados[,-1])
plot(dados[,-c(1,3)])
plot(dados[,-c(1,3)],cex=2)
plot(dados[,-c(1,3)],pch=19)
par(ps=10)
plot(dados[,-c(1,3)],pch=19)
par(ps=30)
plot(dados[,-c(1,3)],pch=19)
par(ps=20)
plot(dados[,-c(1,3)],pch=19)
plot(dados[,-c(1,3)],pch=19,cex.axis=0.5)
dados<- readxl::read_excel("D:/Documentos (D)/UFJF/7-PERIODO/IC/obitos.xlsx")
View(dados)
dados<- readxl::read_excel("D:/Documentos (D)/UFJF/7-PERIODO/IC/obitos.xlsx", skip=6)
View(dados)
dados <- dados[-55,]
dados<- dados[-1,]
dados<- readxl::read_excel("D:/Documentos (D)/UFJF/7-PERIODO/IC/obitos.xlsx", skip=6)
dados <- dados[-55,-1]
for(i in (1:26)*2){
dados[i] <- dados[i-1]
}
dados<- readxl::read_excel("D:/Documentos (D)/UFJF/7-PERIODO/IC/obitos.xlsx", skip=6)
dados <- dados[-55,-1]
for(i in (1:26)*2){
dados[i,1] <- dados[i-1,1]
}
#P08
# lambda=2
N <- rpois(1,2)
N
#P08
# lambda=2
N <- rpois(1,2)
#P08
# lambda=2
N <- rpois(1,2)
#P08
# lambda=2
#gerando Ti's
t <- rexp(100,2)
#P08
# lambda=2
#gerando Ti's
t <- rexp(100,2)
N <- sapply(t,
function(t) rpois(1,t*2))
S <- cumsum(t)
plot(S, N)
plot(S, N,type=L)
plot(S, N,type="l")
Ns <- cumsum(N)
plot(S, Ns,type="l")
#P08
# lambda=2
#gerando Ti's
t <- rexp(10,2)
N <- sapply(t,
function(t) rpois(1,t*2))
Ns <- cumsum(N)
S <- cumsum(t)
plot(S, Ns,type="l")
plot(S, Ns,type="o",pch=19)
plot(S, Ns,type="o",pch=19, xlab="t",ylab="N(t)")
N <- rpois(1,7*2)
plot(S, Ns,type="s",pch=19, xlab="t",ylab="N(t)")
#P08
# lambda=2
# tempo de realização:
# T = 10
S <- sapply(1:10, function(n) rgamma(1,shape=n,rate=2) )
rm(list=ls())
#P08
# lambda=2
# tempo de realização:
# T = 10
S <- sapply(1:10, function(n) rgamma(1,shape=n,rate=2) )
#P08
# lambda=2
# tempo de realização:
# T = 10
S <- sapply(1:10, function(n) rgamma(1,shape=n,rate=2) ) |> sort()
S
#P08
# lambda=2
# Sabendo que: N(10) = 10
S <- sapply(1:10, function(n) rgamma(1,shape=n,rate=2) ) |> sort()
S
#P08
# lambda=2
# Sabendo que: N(10) = 13
S <- sapply(1:13, function(n) rgamma(1,shape=n,rate=2) ) |> sort()
while(S[10]<10)
S <- sapply(1:10, function(n) rgamma(1,shape=n,rate=2) ) |> sort()
while(S[10]>13)
S <- sapply(1:10, function(n) rgamma(1,shape=n,rate=2) ) |> sort()
S
#P08
# lambda=2
# Sabendo que: N(10) = 13
S <- 14
while(max(S)>13)
S <- sapply(1:10, function(n) rgamma(1,shape=n,rate=2) ) |> sort()
S
while(max(S)>13)
S <- sapply(1:13, function(n) rgamma(1,shape=n,rate=2) ) |> sort()
S
#P08
# lambda=2
# Sabendo que: N(10) = 13
S <- 14 #so inicializando S
while(max(S)>13)
S <- sapply(1:13, function(n) rgamma(1,shape=n,rate=2) ) |> sort()
S
#P08
# lambda=2
# Sabendo que: N(10) = 13
t <- 10
Nt <- 13
Nt <- rpois(1,2*10)
S <- 14 #so inicializando S
while(max(S)>Nt)
S <- sapply(1:Nt, function(n) rgamma(1,shape=n,rate=2) ) |> sort()
S <- Nt+1 #so inicializando S
while(max(S)>Nt)
S <- sapply(1:Nt, function(n) rgamma(1,shape=n,rate=2) ) |> sort()
S
S <- Nt+1 #inicializando S para o while
while(max(S)>t)
S <- sapply(1:Nt, function(n) rgamma(1,shape=n,rate=2) ) |> sort()
h <- t+1 #inicializando S para o while
while(sum(h)>t)
h <- sapply(1:Nt, function(n) rexp(1,2))
sum(h)
S <- cumsum(h)
plot(S,1:Nt, type="s",lwd=1.5,xlab="t",ylab="N(t)")
#P08
# lambda=2
# Sabendo que: N(10) = 13
t <- 4 #tempo de realizacao do experimento
Nt <- rpois(1,2*10) #contagem ao fim do expermento
h <- t+1 #inicializando S para o while
while(sum(h)>t)
h <- sapply(1:Nt, function(n) rexp(1,2))
S <- cumsum(h)
plot(S,1:Nt, type="s",lwd=1.5,xlab="t",ylab="N(t)")
N <- 27
lam <- 1
t<- rexp(N,rate=lam)
sapply(t,function(t) rpois(1,27*t))
rpois(1,31)
lam <- 1
N <- rpois(1, lam*31)
t<- rexp(N,rate=lam)
S <- cumsum(c(0,t))
plot(0:N,S,type="s",verticals=F)
plot(0:N,S,type="s",do.points=T)
plot(0:N,S,type="s")
warnings()
plot(0:N,S,type="s")
plot(0:N,S,type="s")
plot(S,0:N,type="s")
points(0:N,S,pch=19)
plot(S,0:N,type="s")
points(S,0:N,pch=19)
points(S,0:N,pch=19,cex=0.5)
plot(S,0:N,type="s")
points(S,0:N,pch=19,cex=0.5)
plot(S,0:N,type="s",xlab="t",ylab="N(t)")
points(S,0:N,pch=19,cex=0.5)
#P09
#A partir dessa simulação, queremos inferir sobre a taxa λ.
lam.hat <- N/max(S)
lam <- 1
simPois <- function(lam){
N <- rpois(1, lam*31)
t<- rexp(N,rate=lam)
S <- cumsum(c(0,t))
return(list(N,S))
}
simulacao <- simPois(lam)
lam <- 1
simPois <- function(lam){
N <- rpois(1, lam*31)
t<- rexp(N,rate=lam)
S <- cumsum(c(0,t))
return(list(N,S))
}
simu <- simPois(lam)
simu <- simPois(lam)
plot(simu$S,0:simu$N,type="s",xlab="t",ylab="N(t)")
simu <- simPois(lam)
plot(simu$S,0:simu$N,type="s",xlab="t",ylab="N(t)")
points(simu$S,0:simu$N,pch=19,cex=0.5)
View(simu)
return(list(N=N,S=S))
simPois <- function(lam){
N <- rpois(1, lam*31)
t<- rexp(N,rate=lam)
S <- cumsum(c(0,t))
return(list(N=N,S=S))
}
simu <- simPois(lam)
plot(simu$S,0:simu$N,type="s",xlab="t",ylab="N(t)")
points(simu$S,0:simu$N,pch=19,cex=0.5)
#P09
#A partir de várias simulações, queremos inferir sobre a taxa λ.
simu <- replicate(100,simPois(lam))
lam <- 1
simPois <- function(lam){
N <- rpois(1, lam*31)
t<- rexp(N,rate=lam)
S <- cumsum(c(0,t))
return(list(N=N,S=S))
}
simu <- simPois(lam)
plot(simu$S,0:simu$N,type="s",xlab="t",ylab="N(t)")
points(simu$S,0:simu$N,pch=19,cex=0.5)
#essa foi uma única simulação.
#P09
#A partir de várias simulações, queremos inferir sobre a taxa λ.
simu <- replicate(100,simPois(lam))
View(simu)
#P09
#A partir de várias simulações, queremos inferir sobre a taxa λ.
simu <- t(replicate(100,simPois(lam)))
View(simu)
View(simu)
simPois <- function(lam){
N <- rpois(1, lam*31)
t<- rexp(N,rate=lam)
S <- cumsum(c(0,t))
return(data.frame(N=N,S=S))
}
simu <- simPois(lam)
plot(simu$S,0:simu$N,type="s",xlab="t",ylab="N(t)")
points(simu$S,0:simu$N,pch=19,cex=0.5)
#P09
#A partir de várias simulações, queremos inferir sobre a taxa λ.
simu <- t(replicate(100,simPois(lam)))
View(simu)
lam <- 1
simPois <- function(lam){
N <- rpois(1, lam*31)
t<- rexp(N,rate=lam)
S <- cumsum(c(0,t))
return(data.frame(N=N,S=S))
}
simu <- simPois(lam)
View(simu)
plot(simu$S,0:simu$N,type="s",xlab="t",ylab="N(t)")
View(simu)
0:simu$N
View(simu)
simu <- simPois(lam)
plot(simu$S,0:simu$N,type="s",xlab="t",ylab="N(t)")
View(simu)
View(simu)
simPois <- function(lam){
N <- rpois(1, lam*31)
t<- rexp(N,rate=lam)
S <- cumsum(c(0,t))
return(list(N=N,S=S))
}
simu <- simPois(lam)
plot(simu$S,0:simu$N,type="s",xlab="t",ylab="N(t)")
points(simu$S,0:simu$N,pch=19,cex=0.5)
#P09
#A partir de várias simulações, queremos inferir sobre a taxa λ.
simu <- replicate(100,simPois(lam))
View(simu)
#P09
#A partir de várias simulações, queremos inferir sobre a taxa λ.
simu <- replicate(100,simPois(lam),simplify = F)
View(simu)
sapply(simu,function(sim){
sim$N/max(sim$S)
})
lam.hat <-sapply(simu,function(sim){
sim$N/max(sim$S)
})
mean(lam.hat)
EQM <- sum((lam-lam.hat)^2)/100
sqrt(EQM)
#média dos estimadores
mean(lam.hat)
#erro quadratico médio
sum((lam-lam.hat)^2)/100
simPois <- function(lam,tmax=31){
N <- rpois(1, lam*tempo)
t<- rexp(N,rate=lam)
S <- cumsum(c(0,t))
return(list(N=N,S=S))
}
simu <- simPois(lam)
plot(simu$S,0:simu$N,type="s",xlab="t",ylab="N(t)")
points(simu$S,0:simu$N,pch=19,cex=0.5)
simPois <- function(lam,tmax=31){
N <- rpois(1, lam*tmax)
t<- rexp(N,rate=lam)
S <- cumsum(c(0,t))
return(list(N=N,S=S))
}
simu <- simPois(lam)
View(simu)
#P09
#A partir de várias simulações, queremos inferir sobre a taxa λ.
simu <- replicate(100,simPois(lam),simplify = F)
lam.hat <-sapply(simu,function(sim){
sim$N/max(sim$S)
})
#A partir de uma simulação com t -> Inf
simu<- simPois(lam, tmax=365) #para 1 ano
#A partir de uma simulação com t -> Inf
simu<- simPois(lam, tmax=365*4) #para 4 anos
simu$N
sim$N/max(sim$S)
simu$N/max(simu$S)
ks.test(lam.hat, pnorm)
#várias simulações com t grande
simu <- replicate(100,simPois(lam,tmax=365*4),simplify = F)
lam.hat <-sapply(simu,function(sim){
sim$N/max(sim$S)
})
ks.test(lam.hat, pnorm)
#várias simulações com t grande
simu <- replicate(100,simPois(lam,tmax=365*4),simplify = F)
lam.hat <-sapply(simu,function(sim){
sim$N/max(sim$S)
})
ks.test(lam.hat, pnorm)
ks.test((lam.hat-365*4)/365*4, pnorm)
ks.test((lam.hat-365*4)/sqrt(365*4), pnorm)
(lam.hat-365*4)/sqrt(365*4)
(lam.hat-365*4)
lam.hat
ks.test((simu$N-365*4)/sqrt(365*4), pnorm)
View(simu)
sapply(simu,function(s) s$N)
ks.test((sapply(simu,function(s) s$N)-365*4)/sqrt(365*4), pnorm)
N.std <- sapply(simu,function(s) s$N)-365*4)/sqrt(365*4)
N.std <- sapply(simu,function(s) s$N)-365*4)/sqrt(365*4))
N.std <- (sapply(simu,function(s) s$N)-365*4)/sqrt(365*4)
ks.test(N.std, pnorm)
sum(duplicated(N.std))
simu <- replicate(100,simPois(lam),simplify = F)
lam.hat <-sapply(simu,function(sim){
sim$N/max(sim$S)
})
N.std <- (sapply(simu,function(s) s$N)-365*4)/sqrt(365*4)
ks.test(N.std, pnorm)
N.std <- (sapply(simu,function(s) s$N)-31)/sqrt(31)
ks.test(N.std, pnorm)
N.std <- (lam.hat-1)/1
ks.test(N.std, pnorm)
N.std <- (lam.hat-1)/sqrt(31)
ks.test(N.std, pnorm)
N.std <- (sapply(simu,function(s) s$N)-31)/sqrt(31)
ks.test(N.std, pnorm)
#A partir de uma simulação com t grande, queremos inferir sobre a taxa λ.
simu<- simPois(lam, tmax=365*4) #para 4 anos
simu$N/max(simu$S)
lam.hat <-simu$N/max(simu$S)
#erro absoluto
abs(1-lam.hat)
#várias simulações com t grande
simu <- replicate(100,simPois(lam,tmax=365*4),simplify = F)
lam.hat <-sapply(simu,function(sim){
sim$N/max(sim$S)
})
N.std <- (sapply(simu,function(s) s$N)-365*4)/sqrt(365*4)
ks.test(N.std, pnorm)
#A partir de várias simulações de 31 dias
simu <- replicate(100,simPois(lam),simplify = F)
lam.hat <-sapply(simu,function(sim){
sim$N/max(sim$S)
})
N.std <- (sapply(simu,function(s) s$N)-31)/sqrt(31)
ks.test(N.std, pnorm)
#média dos estimadores
mean(lam.hat)
#erro quadratico médio
sum((lam-lam.hat)^2)/100
#3- A partir de várias simulações de 31 dias
simu <- replicate(100,simPois(lam),simplify = F)
lam.hat <-sapply(simu,function(sim){
sim$N/max(sim$S)
})
N.std <- (sapply(simu,function(s) s$N)-31)/sqrt(31)
ks.test(N.std, pnorm)
#média dos estimadores
mean(lam.hat)
#erro quadratico médio
sum((lam-lam.hat)^2)/100
#erro absoluto médio
abs(1-lam.hat)/100
#erro absoluto médio
sum(abs(1-lam.hat))/100
#erro quadratico médio
sum((lam-lam.hat)^2)/100
simu <- replicate(100,simPois(lam,tmax=365*4),simplify = F)
lam.hat <-sapply(simu,function(sim){
sim$N/max(sim$S)
})
N.std <- (sapply(simu,function(s) s$N)-365*4)/sqrt(365*4)
ks.test(N.std, pnorm)
#média dos estimadores
mean(lam.hat)
#erro absoluto médio
sum(abs(1-lam.hat))/100
#erro quadratico médio
sum((lam-lam.hat)^2)/100
simu <- replicate(100,simPois(lam),simplify = F)
lam.hat <-sapply(simu,function(sim){
sim$N/max(sim$S)
})
N.std <- (sapply(simu,function(s) s$N)-31)/sqrt(31)
ks.test(N.std, pnorm)
#conferimos menos confiança na normalidade do estimador.
#média dos estimadores
mean(lam.hat)
#erro absoluto médio
sum(abs(1-lam.hat))/100
#erro quadratico médio
sum((lam-lam.hat)^2)/100
ID <- 1:27
B2 <-c(110.4,102.8,101.0,108.4,100.7,100.3,102.0,93.7,98.9,96.6,
99.4,96.2,99.0,88.4,75.3,92.0,82.4,77.1,74.0,65.7,56.8,62.1,61.0,53.2,59.4,58.7,58.0)
Sol <- c(176,155,273,273,256,280,280,184,216,
198,59,80,80,105,180,180,177,230,203,191,191,191,76,213,213,151,205)
Humidade <- c(7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,
2.0,2.0,47.4,47.4,47.4,47.4,47.4,47.4,47.4,47.4,47.4)
Temp.Ar <- c(78,89,89,72,84,87,74,87,88,76,
65,67,62,70,73,65,76,82,76,83,82,69,74,76,69,75,76)
dados <- data.frame(ID,B2,Sol,Humidade,Temp.Ar)
knitr::kable(dados)
setwd("D:/Documentos (D)/UFJF/7-PERIODO/COMPUTACIONAL II/Estatistica-Computacional-II/Milena/Atividades/Trabalho")
